{"version":3,"sources":["components/Box.tsx","models/Vector2D.ts","models/Box2D.ts","utils.ts","components/Viewport.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["E_ResizerType","Vector2D","X","Y","Object","classCallCheck","this","_X","_Y","Vector","v","Box2D","Name","Min","Max","DistanceFromCameraView","_Name","_DistanceFromCameraView","_Min","_Max","_IsValid","_TruncationPercentage","_OcclusionPercentage","_Truncated","_Occluded","SetBoxValidity","concat","Date","now","ZeroVector","Box","IsEqual","Other","IntersectionX","Math","min","max","IntersectionY","Intersect","TestPoint","IsPointInside","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","Width","Height","InitMin","ShiftX","ShiftY","IsBoxMouseDown","ActiveResizer","NONE","OnBoxMouseDown","bind","assertThisInitialized","OnBoxMouseUp","OnResizerMouseDown","OnResizerMouseUp","prevProps","_this$state","Mouse","OnBoxMouseMove","OnResizerMouseMove","_this$state2","_this$props","OnChange","_this$state3","_this$props2","Target","Elevation","react_default","a","createElement","style","position","width","height","data-testid","className","left","top","zIndex","onMouseDown","onMouseUp","title","TOP_LEFT","TOP_RIGHT","BOTTOM_LEFT","BOTTOM_RIGHT","MouseShiftX","MouseShiftY","setState","_this$state4","MouseX","MouseY","Resizer","_this2","NewWidth","NewHeight","prevState","objectSpread","Component","debounce","inDebounce","ms","arguments","length","undefined","fn","_len","params","Array","_key","window","clearTimeout","setTimeout","apply","Viewport","ComputeOccTrunc","Boxes","OcclusionThreshold","TruncationThreshold","BoxesInViewport","keys","map","OverlappingBoxes","i","j","IsBehind","IsInside","Occluded","Truncated","OcclusionPercentage","TruncationPercentage","push","forEach","Occluders","Index","TotalOverlappedArea","Occluder","OverlappingAreaWith","Comparator","CompIndex","Result","GetIntersectionBox","GetArea","OnMouseMove","OnBoxChange","OnTruncationChange","OnOcclusionChange","document","addEventListener","PrevProps","PrevState","removeEventListener","A_InitMin","B_InitMin","C_InitMin","type","step","onChange","value","marginLeft","fontSize","marginBottom","key","fontWeight","color","src_components_Box","Event","Number","currentTarget","event","clientX","clientY","defineProperty","App","src_components_Viewport","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4e7e242.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Box.css\";\n\nimport Vector2D from \"../models/Vector2D\";\nimport Box2D from \"../models/Box2D\";\n\ninterface IProps {\n  Name: string;\n  Mouse: Vector2D;\n  DistanceFromCameraView: number;\n  Target?: boolean;\n  OnChange: (Box: Box2D) => void;\n  InitMin: Vector2D;\n}\n\nenum E_ResizerType {\n  NONE,\n  TOP_LEFT,\n  TOP_RIGHT,\n  BOTTOM_LEFT,\n  BOTTOM_RIGHT\n}\n\ninterface IState {\n  Min: Vector2D;\n  Max: Vector2D;\n  Width: number;\n  Height: number;\n  ShiftX: number;\n  ShiftY: number;\n  IsBoxMouseDown: boolean;\n  ActiveResizer: E_ResizerType;\n}\n\nclass Box extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      Width: 100,\n      Height: 100,\n      Min: props.InitMin,\n      Max: new Vector2D(props.InitMin.X + 100, props.InitMin.Y + 100),\n      ShiftX: 0,\n      ShiftY: 0,\n      IsBoxMouseDown: false,\n      ActiveResizer: E_ResizerType.NONE\n    };\n\n    this.OnBoxMouseDown = this.OnBoxMouseDown.bind(this);\n    this.OnBoxMouseUp = this.OnBoxMouseUp.bind(this);\n    this.OnResizerMouseDown = this.OnResizerMouseDown.bind(this);\n    this.OnResizerMouseUp = this.OnResizerMouseUp.bind(this);\n  }\n\n  componentDidUpdate(prevProps: IProps) {\n    const { ActiveResizer, IsBoxMouseDown } = this.state;\n    if (!prevProps.Mouse.IsEqual(this.props.Mouse)) {\n      if (IsBoxMouseDown) {\n        this.OnBoxMouseMove();\n      }\n      this.OnResizerMouseMove(ActiveResizer);\n\n      const { Min, Max } = this.state;\n      const { OnChange, DistanceFromCameraView, Name } = this.props;\n      OnChange(new Box2D(Name, Min, Max, DistanceFromCameraView));\n    }\n  }\n\n  render() {\n    const { Width, Height, Min, Max, IsBoxMouseDown } = this.state;\n    const { Name, Target, DistanceFromCameraView } = this.props;\n    const Elevation = IsBoxMouseDown\n      ? DistanceFromCameraView + 10000\n      : DistanceFromCameraView;\n    return (\n      <div style={{ position: \"absolute\", width: \"100vw\", height: \"100vh\" }}>\n        <div\n          data-testid=\"container-box\"\n          className={`box ${Target ? \"target\" : \"\"}`}\n          style={{ width: Width, height: Height, left: Min.X, top: Min.Y }}\n        >\n          <div\n            className=\"draggable-area\"\n            style={{ zIndex: Elevation }}\n            onMouseDown={this.OnBoxMouseDown}\n            onMouseUp={this.OnBoxMouseUp}\n          />\n          <div className=\"resizers\">\n            <div\n              title={`(${Min.X}, ${Min.Y})`}\n              style={{ zIndex: 10000 }}\n              className=\"resizer top-left\"\n              onMouseDown={this.OnResizerMouseDown(E_ResizerType.TOP_LEFT)}\n              onMouseUp={this.OnResizerMouseUp}\n            />\n            <div\n              title={`(${Max.X}, ${Min.Y})`}\n              style={{ zIndex: 10000 }}\n              className=\"resizer top-right\"\n              onMouseDown={this.OnResizerMouseDown(E_ResizerType.TOP_RIGHT)}\n              onMouseUp={this.OnResizerMouseUp}\n            />\n            <div\n              title={`(${Min.X}, ${Max.Y})`}\n              style={{ zIndex: 10000 }}\n              className=\"resizer bottom-left\"\n              onMouseDown={this.OnResizerMouseDown(E_ResizerType.BOTTOM_LEFT)}\n              onMouseUp={this.OnResizerMouseUp}\n            />\n            <div\n              title={`(${Max.X}, ${Max.Y})`}\n              style={{ zIndex: 10000 }}\n              className=\"resizer bottom-right\"\n              onMouseDown={this.OnResizerMouseDown(E_ResizerType.BOTTOM_RIGHT)}\n              onMouseUp={this.OnResizerMouseUp}\n            />\n          </div>\n          <div className=\"name\">{Name}</div>\n        </div>\n      </div>\n    );\n  }\n\n  OnBoxMouseDown() {\n    const { Min } = this.state;\n    const { Mouse } = this.props;\n\n    const MouseShiftX = Mouse.X - Min.X;\n    const MouseShiftY = Mouse.Y - Min.Y;\n\n    this.setState({\n      IsBoxMouseDown: true,\n      ShiftX: MouseShiftX,\n      ShiftY: MouseShiftY\n    });\n  }\n\n  OnBoxMouseUp() {\n    this.setState({\n      IsBoxMouseDown: false\n    });\n  }\n\n  OnBoxMouseMove() {\n    const { IsBoxMouseDown, ShiftX, ShiftY, Width, Height } = this.state;\n    const { Mouse } = this.props;\n    if (IsBoxMouseDown) {\n      const MouseX = Mouse.X - ShiftX;\n      const MouseY = Mouse.Y - ShiftY;\n\n      this.setState({\n        Min: new Vector2D(MouseX, MouseY),\n        Max: new Vector2D(MouseX + Width, MouseY + Height)\n      });\n    }\n  }\n\n  OnResizerMouseDown(Resizer: E_ResizerType) {\n    return () => {\n      this.setState({\n        ActiveResizer: Resizer\n      });\n    };\n  }\n\n  OnResizerMouseUp() {\n    this.setState({ ActiveResizer: E_ResizerType.NONE });\n  }\n\n  OnResizerMouseMove(ActiveResizer: E_ResizerType) {\n    if (ActiveResizer !== E_ResizerType.NONE) {\n      const { Min } = this.state;\n      const { Mouse } = this.props;\n\n      switch (ActiveResizer) {\n        case E_ResizerType.TOP_LEFT: {\n          const { Max } = this.state;\n\n          const NewWidth = Max.X - Mouse.X;\n          const NewHeight = Max.Y - Mouse.Y;\n\n          this.setState({\n            Width: NewWidth,\n            Height: NewHeight,\n            Min: new Vector2D(Mouse.X, Mouse.Y)\n          });\n          break;\n        }\n        case E_ResizerType.TOP_RIGHT: {\n          const { Max } = this.state;\n\n          const NewWidth = Mouse.X - Min.X;\n          const NewHeight = Max.Y - Mouse.Y;\n\n          this.setState(prevState => ({\n            ...prevState,\n            Width: NewWidth,\n            Height: NewHeight,\n            Min: new Vector2D(prevState.Min.X, Mouse.Y),\n            Max: new Vector2D(Mouse.X, prevState.Max.Y)\n          }));\n          break;\n        }\n        case E_ResizerType.BOTTOM_RIGHT: {\n          const NewWidth = Mouse.X - Min.X;\n          const NewHeight = Mouse.Y - Min.Y;\n\n          this.setState({\n            Width: NewWidth,\n            Height: NewHeight,\n            Max: new Vector2D(Mouse.X, Mouse.Y)\n          });\n          break;\n        }\n        case E_ResizerType.BOTTOM_LEFT: {\n          const { Max } = this.state;\n\n          const NewWidth = Max.X - Mouse.X;\n          const NewHeight = Mouse.Y - Min.Y;\n\n          this.setState(prevState => ({\n            ...prevState,\n            Width: NewWidth,\n            Height: NewHeight,\n            Min: new Vector2D(Mouse.X, prevState.Min.Y),\n            Max: new Vector2D(prevState.Max.X, Mouse.Y)\n          }));\n          break;\n        }\n      }\n    }\n  }\n}\n\nexport default Box;\n","class Vector2D {\n  private _X: number;\n  private _Y: number;\n\n  static get ZeroVector(): Vector2D {\n    return new Vector2D(0, 0);\n  }\n\n  static get UnitVector(): Vector2D {\n    return new Vector2D(1, 1);\n  }\n\n  constructor();\n  constructor(X: number, Y: number);\n  constructor(X?: any, Y?: any) {\n    if (typeof X == \"number\" && typeof Y == \"number\") {\n      this._X = X;\n      this._Y = Y;\n    } else {\n      this._X = this._Y = 0;\n    }\n  }\n\n  public get X(): number {\n    return this._X;\n  }\n\n  public get Y(): number {\n    return this._Y;\n  }\n\n  public set X(v: number) {\n    this._X = v;\n  }\n\n  public set Y(v: number) {\n    this._Y = v;\n  }\n\n  /**\n   * Equality check with the given vector.\n   * @param Vector to be compared against\n   * @returns boolean\n   */\n  IsEqual(Vector: Vector2D): boolean {\n    return this._X === Vector.X && this._Y === Vector.Y;\n  }\n}\n\nexport default Vector2D;\n","import Vector2D from \"./Vector2D\";\n\nclass Box2D {\n  private _Name: string;\n  private _DistanceFromCameraView: number;\n  private _Min: Vector2D;\n  private _Max: Vector2D;\n  private _IsValid: boolean;\n  private _TruncationPercentage: number;\n  private _OcclusionPercentage: number;\n  private _Truncated: boolean;\n  private _Occluded: boolean;\n\n  constructor();\n  constructor(\n    Name: string,\n    Min: Vector2D,\n    Max: Vector2D,\n    DistanceFromCameraView: number\n  );\n  constructor(Name?: any, Min?: any, Max?: any, DistanceFromCameraView?: any) {\n    this._TruncationPercentage = 0;\n    this._OcclusionPercentage = 0;\n    this._Truncated = false;\n    this._Occluded = false;\n    this._IsValid = false;\n    if (\n      typeof Name === \"string\" &&\n      Min instanceof Vector2D &&\n      Max instanceof Vector2D\n    ) {\n      this._Name = Name;\n      this._Min = Min;\n      this._Max = Max;\n      this._DistanceFromCameraView = DistanceFromCameraView;\n      this.SetBoxValidity();\n    } else {\n      this._Name = `${Date.now()}`;\n      this._Min = Vector2D.ZeroVector;\n      this._Max = Vector2D.ZeroVector;\n      this._IsValid = false;\n      this._DistanceFromCameraView = 0;\n    }\n  }\n\n  public get Name(): string {\n    return this._Name;\n  }\n\n  public get DistanceFromCameraView(): number {\n    return this._DistanceFromCameraView;\n  }\n\n  public get TruncationPercentage(): number {\n    return this._TruncationPercentage;\n  }\n\n  public get OcclusionPercentage(): number {\n    return this._OcclusionPercentage;\n  }\n\n  public get Truncated(): boolean {\n    return this._Truncated;\n  }\n\n  public get Occluded(): boolean {\n    return this._Occluded;\n  }\n\n  public set TruncationPercentage(v: number) {\n    this._TruncationPercentage = v;\n  }\n\n  public set OcclusionPercentage(v: number) {\n    this._OcclusionPercentage = v;\n  }\n\n  public set Truncated(v: boolean) {\n    this._Truncated = v;\n  }\n\n  public set Occluded(v: boolean) {\n    this._Occluded = v;\n  }\n\n  public get Min(): Vector2D {\n    return this._Min;\n  }\n\n  public get Max(): Vector2D {\n    return this._Max;\n  }\n\n  public get IsValid(): boolean {\n    return this._IsValid;\n  }\n\n  public set Name(v: string) {\n    this._Name = v;\n  }\n\n  public set DistanceFromCameraView(v: number) {\n    this._DistanceFromCameraView = v;\n  }\n\n  public set Min(v: Vector2D) {\n    this._Min.X = v.X;\n    this._Min.Y = v.Y;\n    this.SetBoxValidity();\n  }\n\n  public set Max(v: Vector2D) {\n    this._Max.X = v.X;\n    this._Max.Y = v.Y;\n    this.SetBoxValidity();\n  }\n\n  /**\n   * Checks if Min and Max points are valid and sets validity.\n   */\n  private SetBoxValidity(): void {\n    this._IsValid = this._Min.X < this._Max.X && this._Min.Y < this._Max.Y;\n  }\n\n  /**\n   * Checks if boxes are equal.\n   * @param Box to compare against\n   */\n  IsEqual(Box: Box2D): boolean {\n    return this._Min.IsEqual(Box.Min) && this._Max.IsEqual(Box.Max);\n  }\n\n  /**\n   * Calcs overlapping area with the given box.\n   * @param Box to check against\n   */\n  OverlappingAreaWith(Other: Box2D): number {\n    const IntersectionX =\n      Math.min(this._Max.X, Other._Max.X) - Math.max(this._Min.X, Other.Min.X);\n    const IntersectionY =\n      Math.min(this._Max.Y, Other.Max.Y) - Math.max(this._Min.Y, Other._Min.Y);\n\n    if (IntersectionX >= 0 && IntersectionY >= 0) {\n      return IntersectionX * IntersectionY;\n    }\n\n    return 0;\n  }\n\n  /**\n   * Gets the intersection Box.\n   * @param Other box to get intersection.\n   */\n  GetIntersectionBox(Other: Box2D): Box2D {\n    if (!this.Intersect(Other)) {\n      return new Box2D(\n        \"No-overlapping\",\n        Vector2D.ZeroVector,\n        Vector2D.ZeroVector,\n        0\n      );\n    }\n    const Min: Vector2D = new Vector2D(\n      Math.max(this._Min.X, Other.Min.X),\n      Math.max(this._Min.Y, Other.Min.Y)\n    );\n    const Max: Vector2D = new Vector2D(\n      Math.min(this._Max.X, Other._Max.X),\n      Math.min(this._Max.Y, Other.Max.Y)\n    );\n    return new Box2D(\"Overlapping\", Min, Max, 0);\n  }\n\n  /**\n   * Gets this box area.\n   */\n  GetArea(): number {\n    const Width = this._Max.X - this._Min.X;\n    const Height = this._Max.Y - this._Min.Y;\n    return Width * Height;\n  }\n\n  /**\n   * Checks whether the given point is inside this box.\n   *\n   * @param Point The point to test.\n   * @return true if the point is inside this box, otherwise false.\n   */\n  IsPointInside(TestPoint: Vector2D): boolean {\n    return (\n      TestPoint.X > this._Min.X &&\n      TestPoint.X < this._Max.X &&\n      TestPoint.Y > this._Min.Y &&\n      TestPoint.Y < this._Max.Y\n    );\n  }\n\n  /**\n   * Checks whether the given box intersects this box.\n   *\n   * @param other bounding box to test intersection\n   * @return true if boxes intersect, false otherwise.\n   */\n  Intersect(Other: Box2D): boolean {\n    if (this._Min.X > Other.Max.X || Other.Min.X > this._Max.X) {\n      return false;\n    }\n\n    if (this._Min.Y > Other.Max.Y || Other.Min.Y > this._Max.Y) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Checks whether the given box is fully encapsulated by this box.\n   *\n   * @param Other The box to test for encapsulation within the bounding volume.\n   * @return true if box is inside this volume, false otherwise.\n   */\n  IsInside(Other: Box2D): boolean {\n    return this.IsPointInside(Other.Min) && this.IsPointInside(Other.Max);\n  }\n}\n\nexport default Box2D;\n","/**\n * Generic function type.\n */\ntype GenericFunction<R = any> = (...args: any) => R;\n\n/**\n * Returns a function that will be invoked until the timeout is over.\n * This timeout restarts evertime the function gets invoked before\n * the interval stablished is over.\n *\n * @template R type of return of the function to debounce. Default `any`.\n * @param ms interval of time to wait for next invocation of the function.\n * By default value is `500`.\n * @param fn function, accepting any number of arguments, to debounce.\n */\nexport const debounce: <R>(\n    ms: number,\n    fn: GenericFunction<R>\n  ) => (...args: any) => void = (ms = 500, fn) => {\n    let inDebounce: number;\n    return (...params: any) => {\n      window.clearTimeout(inDebounce);\n      inDebounce = window.setTimeout(() => fn.apply(null, params), ms);\n    };\n  };","import React, { Component } from \"react\";\nimport \"./Viewport.css\";\nimport Box from \"./Box\";\nimport Vector2D from \"../models/Vector2D\";\nimport Box2D from \"../models/Box2D\";\nimport { debounce } from \"../utils\";\n\ninterface IState {\n  Mouse: Vector2D;\n  TruncationThreshold: number;\n  OcclusionThreshold: number;\n  Boxes: {\n    [Name: string]: Box2D;\n  };\n  BoxesInViewport: Box2D[];\n}\n\nclass Viewport extends Component<{}, IState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      Mouse: Vector2D.ZeroVector,\n      TruncationThreshold: 0.15,\n      OcclusionThreshold: 0.75,\n      Boxes: {},\n      BoxesInViewport: []\n    };\n\n    this.OnMouseMove = this.OnMouseMove.bind(this);\n    this.OnBoxChange = this.OnBoxChange.bind(this);\n    this.OnTruncationChange = this.OnTruncationChange.bind(this);\n    this.OnOcclusionChange = this.OnOcclusionChange.bind(this);\n  }\n\n  componentDidMount() {\n    window.document.addEventListener(\"mousemove\", this.OnMouseMove);\n  }\n\n  componentDidUpdate(PrevProps: {}, PrevState: IState) {\n    if (!PrevState.Mouse.IsEqual(this.state.Mouse)) {\n      this.ComputeOccTrunc();\n    }\n  }\n\n  componentWillUnmount() {\n    window.document.removeEventListener(\"mousemove\", this.OnMouseMove);\n  }\n\n  render() {\n    const {\n      Mouse,\n      TruncationThreshold,\n      OcclusionThreshold,\n      BoxesInViewport\n    } = this.state;\n    const A_InitMin = new Vector2D(200, 10);\n    const B_InitMin = new Vector2D(200, 130);\n    const C_InitMin = new Vector2D(200, 250);\n\n    return (\n      <div className=\"container\">\n        {BoxesInViewport.length > 0 ? (\n          <div className=\"details\">\n            <span className=\"details-title\">Thresholds</span>\n            <div className=\"thresholds\">\n              <table>\n                <tbody>\n                  <tr>\n                    <td>Truncation:</td>\n                    <td>\n                      <input\n                        type=\"number\"\n                        width=\"100\"\n                        step={0.01}\n                        max=\"1\"\n                        min=\"0\"\n                        onChange={this.OnTruncationChange}\n                        value={TruncationThreshold}\n                      />\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Occlusion:</td>\n                    <td>\n                      <input\n                        type=\"number\"\n                        width=\"100\"\n                        step={0.01}\n                        max=\"1\"\n                        min=\"0\"\n                        onChange={this.OnOcclusionChange}\n                        value={OcclusionThreshold}\n                      />\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n            <hr style={{ width: \"160px\", marginLeft: 0 }} />\n            {BoxesInViewport.map((Box, Index) => {\n              return (\n                <div\n                  style={{ fontSize: \"0.4em\", marginBottom: \"4px\" }}\n                  key={Index}\n                >\n                  <span style={{ fontWeight: \"bold\" }}>{Box.Name}</span>: <br />\n                  Distance from camera:{\" \"}\n                  <span style={{ fontWeight: \"bold\" }}>\n                    {Box.DistanceFromCameraView}\n                  </span>\n                  <br />\n                  {Box.Truncated ? (\n                    <span style={{ color: \"#ff0000\" }}>Truncated</span>\n                  ) : (\n                    \"Not Truncated\"\n                  )}{\" \"}\n                  <br />\n                  T. Percentage:{\" \"}\n                  <span style={{ fontWeight: \"bold\" }}>\n                    {Box.TruncationPercentage}\n                  </span>{\" \"}\n                  <br />\n                  {Box.Occluded ? (\n                    <span style={{ color: \"#ff0000\" }}>Occluded</span>\n                  ) : (\n                    \"Not Occluded\"\n                  )}{\" \"}\n                  <br />\n                  O. Percentage:{\" \"}\n                  <span style={{ fontWeight: \"bold\" }}>\n                    {Box.OcclusionPercentage}\n                  </span>{\" \"}\n                  <br />\n                </div>\n              );\n            })}\n          </div>\n        ) : (\n          <div>Loading...</div>\n        )}\n        <Box\n          Name=\"A\"\n          Mouse={Mouse}\n          DistanceFromCameraView={100}\n          OnChange={this.OnBoxChange}\n          InitMin={A_InitMin}\n        />\n        <Box\n          Name=\"B\"\n          Mouse={Mouse}\n          DistanceFromCameraView={10}\n          OnChange={this.OnBoxChange}\n          InitMin={B_InitMin}\n        />\n        <Box\n          Name=\"C\"\n          Mouse={Mouse}\n          DistanceFromCameraView={50}\n          OnChange={this.OnBoxChange}\n          InitMin={C_InitMin}\n        />\n      </div>\n    );\n  }\n\n  OnTruncationChange(Event: React.FormEvent<HTMLInputElement>) {\n    this.setState({\n      TruncationThreshold: Number(Event.currentTarget.value)\n    });\n  }\n\n  OnOcclusionChange(Event: React.FormEvent<HTMLInputElement>) {\n    this.setState({\n      OcclusionThreshold: Number(Event.currentTarget.value)\n    });\n  }\n\n  OnMouseMove(event: MouseEvent) {\n    this.setState({\n      Mouse: new Vector2D(event.clientX, event.clientY)\n    });\n  }\n\n  OnBoxChange(Box: Box2D) {\n    this.setState(prevState => ({\n      ...prevState,\n      Boxes: {\n        ...prevState.Boxes,\n        [Box.Name]: Box\n      }\n    }));\n  }\n\n  ComputeOccTrunc = debounce(50, () => {\n    const { Boxes, OcclusionThreshold, TruncationThreshold } = this.state;\n    const Names = Object.keys(Boxes);\n    const BoxesInViewport = Names.map(Name => Boxes[Name]);\n    const OverlappingBoxes: Array<Box2D[]> = [];\n\n    for (let i = 0; i < BoxesInViewport.length; i++) {\n      OverlappingBoxes[i] = [];\n      for (let j = 0; j < BoxesInViewport.length; j++) {\n        // avoid comparing with itself\n        if (i === j) {\n          continue;\n        }\n\n        // intersects?\n        if (BoxesInViewport[i].Intersect(BoxesInViewport[j])) {\n          const IsBehind =\n            BoxesInViewport[i].DistanceFromCameraView >\n            BoxesInViewport[j].DistanceFromCameraView;\n\n          // is comparison box completely inside?\n          if (BoxesInViewport[i].IsInside(BoxesInViewport[j])) {\n            // is comparison box behind?\n            if (!IsBehind) {\n              continue;\n            }\n          }\n\n          // is completely inside?\n          if (BoxesInViewport[j].IsInside(BoxesInViewport[i])) {\n            // is behind?\n            if (IsBehind) {\n              BoxesInViewport[i].Occluded = true;\n              BoxesInViewport[i].Truncated = true;\n              BoxesInViewport[i].OcclusionPercentage = 1.0;\n              BoxesInViewport[i].TruncationPercentage = 1.0;\n            }\n          }\n          // what percentage do they intersect?\n          else {\n            // is behind?\n            if (IsBehind) {\n              OverlappingBoxes[i].push(BoxesInViewport[j]);\n            }\n          }\n        }\n      }\n    }\n\n    OverlappingBoxes.forEach((Occluders, Index) => {\n      if (!BoxesInViewport[Index].Occluded) {\n        let TotalOverlappedArea = 0;\n\n        Occluders.forEach(Occluder => {\n          TotalOverlappedArea += BoxesInViewport[Index].OverlappingAreaWith(\n            Occluder\n          );\n        });\n\n        Occluders.forEach(Occluder => {\n          Occluders.forEach((Comparator, CompIndex) => {\n            if (\n              Occluder.Name !== Comparator.Name &&\n              CompIndex < Occluders.length - 1\n            ) {\n              const Result = Comparator.GetIntersectionBox(\n                Occluders[CompIndex + 1]\n              );\n\n              // Clamp intersection box\n              if (Result.Min.X < BoxesInViewport[Index].Min.X) {\n                Result.Min.X = BoxesInViewport[Index].Min.X;\n              } else if (Result.Min.X > BoxesInViewport[Index].Max.X) {\n                Result.Min.X = BoxesInViewport[Index].Max.X;\n              }\n              if (Result.Min.Y < BoxesInViewport[Index].Min.Y) {\n                Result.Min.Y = BoxesInViewport[Index].Min.Y;\n              } else if (Result.Min.Y > BoxesInViewport[Index].Max.Y) {\n                Result.Min.Y = BoxesInViewport[Index].Max.Y;\n              }\n              if (Result.Max.X > BoxesInViewport[Index].Max.X) {\n                Result.Max.X = BoxesInViewport[Index].Max.X;\n              } else if (Result.Max.X < BoxesInViewport[Index].Min.X) {\n                Result.Max.X = BoxesInViewport[Index].Min.X;\n              }\n              if (Result.Max.Y > BoxesInViewport[Index].Max.Y) {\n                Result.Max.Y = BoxesInViewport[Index].Max.Y;\n              } else if (Result.Max.Y < BoxesInViewport[Index].Min.Y) {\n                Result.Max.Y = BoxesInViewport[Index].Min.Y;\n              }\n\n              TotalOverlappedArea -= Result.GetArea();\n            }\n          });\n        });\n\n        BoxesInViewport[Index].OcclusionPercentage =\n          TotalOverlappedArea / BoxesInViewport[Index].GetArea();\n        BoxesInViewport[Index].TruncationPercentage =\n          TotalOverlappedArea / BoxesInViewport[Index].GetArea();\n\n        // if above the OcclusionThreshold: occluded\n        if (\n          TotalOverlappedArea / BoxesInViewport[Index].GetArea() >=\n          OcclusionThreshold\n        ) {\n          BoxesInViewport[Index].Occluded = true;\n          BoxesInViewport[Index].Truncated = true;\n          BoxesInViewport[Index].OcclusionPercentage =\n            TotalOverlappedArea / BoxesInViewport[Index].GetArea();\n          BoxesInViewport[Index].TruncationPercentage =\n            TotalOverlappedArea / BoxesInViewport[Index].GetArea();\n        }\n        // if above the TruncationThreshold: truncated\n        else if (\n          TotalOverlappedArea / BoxesInViewport[Index].GetArea() >=\n          TruncationThreshold\n        ) {\n          BoxesInViewport[Index].Truncated = true;\n          BoxesInViewport[Index].TruncationPercentage =\n            TotalOverlappedArea / BoxesInViewport[Index].GetArea();\n        }\n      }\n    });\n\n    this.setState({\n      BoxesInViewport\n    });\n  });\n}\n\nexport default Viewport;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Viewport from \"./components/Viewport\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Viewport />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}